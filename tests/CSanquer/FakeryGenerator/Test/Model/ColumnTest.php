<?php

namespace CSanquer\FakeryGenerator\Test\Model;

use CSanquer\FakeryGenerator\Model\Column;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-05 at 12:29:41.
 */
class ColumnTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Column
     */
    protected $column;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->column = new Column();
    }

    public function testConstruct()
    {
        $column = new Column('lastname', '%lastname%', 'capitalize');
        $this->assertEquals('lastname', $column->getName());
        $this->assertEquals('%lastname%', $column->getValue());
        $this->assertEquals('capitalize', $column->getConvertMethod());
        
        $column3 = new Column('mode', '%mode%', 'lowercase');
        $column2 = new Column('payment', null, null, [$column3]);
        $this->assertEquals('payment', $column2->getName());
        $this->assertEquals(null, $column2->getValue());
        $this->assertEquals(null, $column2->getConvertMethod());
        $this->assertEquals(['mode' => $column3], $column2->getColumns());
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\Column::getName
     * @covers CSanquer\FakeryGenerator\Model\Column::setName
     */
    public function testGetSetName()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Column', $this->column->setName('firstname'));
        $this->assertEquals('firstname', $this->column->getName());
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\Column::getValue
     * @covers CSanquer\FakeryGenerator\Model\Column::setValue
     */
    public function testGetSetValue()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Column', $this->column->setValue('%firstname%'));
        $this->assertEquals('%firstname%', $this->column->getValue());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Column::getConvertMethod
     * @covers CSanquer\FakeryGenerator\Model\Column::setConvertMethod
     */
    public function testGetSetConvertMethod()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Column', $this->column->setConvertMethod('uppercase'));
        $this->assertEquals('uppercase', $this->column->getConvertMethod());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Column::getColumns
     * @covers CSanquer\FakeryGenerator\Model\Column::setColumns
     */
    public function testGetSetColumns()
    {
        $column = new Column('mode', '%mode%', 'lowercase');
        
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Column', $this->column->setColumns([$column]));
        $this->assertEquals(['mode' => $column], $this->column->getColumns());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Column::addColumn
     * @covers CSanquer\FakeryGenerator\Model\Column::getColumn
     * @covers CSanquer\FakeryGenerator\Model\Column::removeColumn
     */
    public function testAddRemoveGetColumn()
    {
        $column = new Column('mode', '%mode%', 'lowercase');
        
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Column', $this->column->addColumn($column));
        $this->assertEquals($column, $this->column->getColumn('mode'));
        $this->assertTrue($this->column->removeColumn($column));
        $this->assertFalse($this->column->removeColumn($column));
    }
    
    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage The column must have a name.
     */
    public function testAddColumnWithEmptyName()
    {
        $this->column->addColumn(new Column(null));
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Column::replaceVariable
     */
    public function testReplaceVariable()
    {
        $this->column->setValue('%firstname%');
        $this->column->setConvertMethod('capitalize');
        $this->assertEquals('Marc', $this->column->replaceVariable(['firstname' => 'marc']));
    }

}
