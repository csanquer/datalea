<?php

namespace CSanquer\FakeryGenerator\Test\Model;

use CSanquer\ColibriCsv\Dialect;
use CSanquer\FakeryGenerator\Model\Column;
use CSanquer\FakeryGenerator\Model\Config;
use CSanquer\FakeryGenerator\Model\Variable;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-05 at 12:29:44.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Config
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = new Config();
    }

    public function testConstruct()
    {
        $this->assertInternalType('int', $this->config->getSeed());
        $this->assertEmpty($this->config->getFormats());
        $this->assertEmpty($this->config->getVariables());
        $this->assertEmpty($this->config->getColumns());
        $this->assertInstanceOf('\\CSanquer\\ColibriCsv\\Dialect', $this->config->getCsvDialect());
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getLocale
     * @covers CSanquer\FakeryGenerator\Model\Config::setLocale
     */
    public function testGetSetLocale()
    {
        $this->assertNull($this->config->getLocale());
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setLocale('fr_FR'));
        $this->assertEquals('fr_FR', $this->config->getLocale());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::setSeed
     * @covers CSanquer\FakeryGenerator\Model\Config::getSeed
     * @covers CSanquer\FakeryGenerator\Model\Config::generateSeed
     */
    public function testHasGetSetGenerateSeed()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->generateSeed());
        $this->assertInternalType('int', $this->config->getSeed());
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setSeed('2354'));
        $this->assertSame(2354, $this->config->getSeed());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getClassName
     * @covers CSanquer\FakeryGenerator\Model\Config::setClassName
     * @covers CSanquer\FakeryGenerator\Model\Config::getClassNameLastPart
     */
    public function testGetSetClassName()
    {
        $this->assertNull($this->config->getClassName());
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setClassName('Entity\\User-'));
        $this->assertEquals('Entity\\User', $this->config->getClassName());
        $this->assertEquals('Entity_User', $this->config->getClassName(true));
        $this->assertEquals('User', $this->config->getClassNameLastPart());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::addFormat
     * @covers CSanquer\FakeryGenerator\Model\Config::hasFormat
     * @covers CSanquer\FakeryGenerator\Model\Config::getFormats
     * @covers CSanquer\FakeryGenerator\Model\Config::removeFormat
     */
    public function testAddHasRemoveFormat()
    {
        $this->assertFalse($this->config->hasFormat('php'));
        $this->assertInternalType('int', $this->config->getSeed());
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->addFormat('php'));
        $this->assertTrue($this->config->hasFormat('php'));
        $this->assertEquals(['php'], $this->config->getFormats());
        $this->assertTrue($this->config->removeFormat('php'));
        $this->assertFalse($this->config->hasFormat('php'));
        $this->assertFalse($this->config->removeFormat('json'));
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getFormats
     * @covers CSanquer\FakeryGenerator\Model\Config::setFormats
     */
    public function testGetSetFormats()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setFormats(['php', 'json']));
        $this->assertSame(['php', 'json'], $this->config->getFormats());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getFakeNumber
     * @covers CSanquer\FakeryGenerator\Model\Config::setFakeNumber
     */
    public function testGetSetFakeNumber()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setFakeNumber('100'));
        $this->assertSame(100, $this->config->getFakeNumber());
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getCsvDialect
     * @covers CSanquer\FakeryGenerator\Model\Config::setCsvDialect
     */
    public function testGetSetsvDialect()
    {
        $dialect = new Dialect(['delimiter' => ',']);
        
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setCsvDialect($dialect));
        $this->assertSame($dialect, $this->config->getCsvDialect());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::createCsvWriter
     */
    public function testCreateCsvWriter()
    {
        $this->assertInstanceOf('\\CSanquer\\ColibriCsv\\CsvWriter', $this->config->createCsvWriter());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getColumns
     * @covers CSanquer\FakeryGenerator\Model\Config::setColumns
     */
    public function testGetSetColumns()
    {
        $column = new Column('firstname', '%firstname%');
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setColumns([$column]));
        $this->assertSame(['firstname' => $column], $this->config->getColumns());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::addColumn
     * @covers CSanquer\FakeryGenerator\Model\Config::getColumn
     * @covers CSanquer\FakeryGenerator\Model\Config::removeColumn
     * @todo   Implement testAddColumn().
     */
    public function testAddGetRemoveColumn()
    {
        $column = new Column('firstname', '%firstname%');
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->addColumn($column));
        $this->assertSame($column, $this->config->getColumn('firstname'));
        $this->assertTrue($this->config->removeColumn($column));
        $this->assertNull($this->config->getColumn('firstname'));
        $this->assertFalse($this->config->removeColumn($column));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage The column must have a name.
     */
    public function testAddColumnWithEmptyName()
    {
        $this->config->addColumn(new Column(null));
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::getVariables
     * @covers CSanquer\FakeryGenerator\Model\Config::setVariables
     */
    public function testGetSetVariables()
    {
        $variable = new Variable('firstname', 'firstname');
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->setVariables([$variable]));
        $this->assertSame(['firstname' => $variable], $this->config->getVariables());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::addVariable
     * @covers CSanquer\FakeryGenerator\Model\Config::getVariable
     * @covers CSanquer\FakeryGenerator\Model\Config::removeVariable
     */
    public function testAddGetRemoveVariable()
    {
        $variable = new Variable('firstname', 'firstname');
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\Config', $this->config->addVariable($variable));
        $this->assertSame($variable, $this->config->getVariable('firstname'));
        $this->assertTrue($this->config->removeVariable($variable));
        $this->assertNull($this->config->getVariable('firstname'));
        $this->assertFalse($this->config->removeVariable($variable));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage The variable must have a name.
     */
    public function testAddVariableWithEmptyName()
    {
        $this->config->addVariable(new Variable(null));
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\Config::generateColumns
     */
    public function testGenerateColumns()
    {
        $this->config->addVariable(new Variable('firstname', 'firstname'));
        $this->config->generateColumns();
        $this->assertEquals(['firstname' => new Column('firstname', '%firstname%')], $this->config->getColumns());
    }

}
