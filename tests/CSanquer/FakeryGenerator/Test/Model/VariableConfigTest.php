<?php

namespace CSanquer\FakeryGenerator\Test\Model;

use CSanquer\FakeryGenerator\Model\VariableConfig;

/**
 * VariableConfigTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-13 at 08:23:50.
 * 
 * @author Charles Sanquer <charles.sanquer@gmail.com>
 */
class VariableConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var VariableConfig
     */
    protected $variableConfig;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->variableConfig = new VariableConfig();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testConstruct()
    {
        $variableConfig = new VariableConfig('firstname', 'firstName', array(1), true);
        $this->assertEquals('firstname', $variableConfig->getName());
        $this->assertEquals('firstName', $variableConfig->getMethod());
        $this->assertEquals(array(1), $variableConfig->getMethodArguments());
        $this->assertEquals(true, $variableConfig->isUnique());
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getName
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getVarName
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setName
     * 
     * @dataProvider providerGetSetName
     */
    public function testGetSetName($name, $expected)
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setName($name));
        $this->assertEquals($expected, $this->variableConfig->getName());
        $this->assertEquals('%'.$expected.'%', $this->variableConfig->getVarName());
    }

    public function providerGetSetName()
    {
        return array(
            array('firstname', 'firstname'),
            array('^$fi;:rstname%;', 'firstname'),
        );
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getMethod
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setMethod
     */
    public function testGetSetMethod()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setMethod('firstName'));
        $this->assertEquals('firstName', $this->variableConfig->getMethod());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getMethodArguments
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setMethodArguments
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::hasMethodArguments
     */
    public function testGetMethodArguments()
    {
        $this->assertFalse($this->variableConfig->hasMethodArguments());
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setMethodArguments(array(1,2)));
        $this->assertTrue($this->variableConfig->hasMethodArguments());
        $this->assertEquals(array(1,2), $this->variableConfig->getMethodArguments());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getMethodArgument
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::hasMethodArgument
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::addMethodArgument
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setMethodArgument
     */
    public function testGetMethodArgument()
    {
        $this->assertFalse($this->variableConfig->hasMethodArgument(0));
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setMethodArgument(0, 1));
        $this->assertTrue($this->variableConfig->hasMethodArguments(0));
        $this->assertEquals(1, $this->variableConfig->getMethodArgument(0));
        $this->assertFalse($this->variableConfig->hasMethodArgument(1));
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->addMethodArgument('5'));
        $this->assertTrue($this->variableConfig->hasMethodArguments(0));
        $this->assertTrue($this->variableConfig->hasMethodArguments(1));
        $this->assertEquals(1, $this->variableConfig->getMethodArgument(0));
        $this->assertEquals('5', $this->variableConfig->getMethodArgument(1));
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::isUnique
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setUnique
     * @dataProvider providerIsSetUnique
     */
    public function testIsSetUnique($unique, $expected)
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setUnique($unique));
        $isUnique = $this->variableConfig->isUnique();
        $this->assertInternalType('bool', $isUnique);
        $this->assertEquals($expected, $isUnique);
    }
    
    public function providerIsSetUnique() 
    {
        return array(
            array(0, false),
            array(1, true),
            array(null, false),
            array('', false),
            array(true, true),
            array(false, false),
        );
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::isOptional
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setOptional
     * @dataProvider providerIsSetOptional
     */
    public function testIsSetOptional($unique, $expected)
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setOptional($unique));
        $isOptional = $this->variableConfig->isOptional();
        $this->assertInternalType('bool', $isOptional);
        $this->assertEquals($expected, $isOptional);
    }
    
    public function providerIsSetOptional() 
    {
        return array(
            array(0, false),
            array(1, true),
            array(null, false),
            array('', false),
            array(true, true),
            array(false, false),
        );
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::generateValue
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::generate
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::replaceVariables
     * @dataProvider providerGenerateValue
     */
    public function testGenerateValue(
        $expected,
        $faker,
        $values,
        $name, 
        $method, 
        $methodArguments, 
        $variableConfigs = array(),
        $optional = false, 
        $unique = false, 
        $force = false, 
        $useIncrement = false, 
        $resetIncrement = false
    ) 
    {
//        $this->markTestIncomplete();
        
        $this->variableConfig->setName($name);
        $this->variableConfig->setMethod($method);
        $this->variableConfig->setMethodArguments($methodArguments);
        $this->variableConfig->setOptional($optional);
        $this->variableConfig->setUnique($unique);
        
//        var_dump($values);
        $this->variableConfig->generateValue($faker, $values, $variableConfigs, $force, $useIncrement, $resetIncrement);
//        var_dump($values);
        
        $this->assertArrayHasKey($name, $values);
        $this->assertArrayHasKey('raw', $values[$name]);
        $this->assertArrayHasKey('flat', $values[$name]);
        
        foreach ($expected as $key => $rules) {
            $this->assertArrayHasKey($key, $values);
            
            if (!empty($rules['raw_type'])) {
                $this->assertInternalType($rules['raw_type'], $values[$key]['raw'], 'raw type is not valid for variable '.$key);
            }

            if (!empty($rules['raw_class'])) {
                $this->assertInstanceOf($rules['raw_class'], $values[$key]['raw'], 'raw class is not valid for variable '.$key);
            }
            
            if (isset($rules['raw_count']) && !is_null($rules['raw_count'])) {
                $this->assertCount($rules['raw_count'], $values[$key]['raw'], 'raw count is not valid for variable '.$key);
            }

            if (!empty($rules['flat_pattern'])) {
                $this->assertRegExp($rules['flat_pattern'], (string) $values[$key]['flat'], 'flat value does not match for variable '.$key);
            }
            
            if (isset($rules['flat_length']) && !is_null($rules['flat_length'])) {
                $this->assertEquals($rules['flat_length'], strlen($values[$key]['flat']), 'flat value length is not valid for variable '.$key);
            }
        }
    }
    
    public function providerGenerateValue() 
    {
        $defaultFaker = \Faker\Factory::create('en_US');
        
        $fakerFixDigit = new \Faker\Generator();
        $fakerFixDigit->addProvider(new FixDigitProvider());
        
        return array(
            // data set #0 simple, no argument
            array(
                // expected rules
                array(
                    'name_prefix' => array(
                        'raw_type' => 'string',
                        'raw_class' => null,
                        'flat_pattern' => '/^(Mr\.|Mrs\.|Ms\.|Miss|Dr\.)$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'name_prefix', // name 
                'prefix', // method 
                // methodArguments 
                array(), 
                // variableConfigs
                array(),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #1 with argument
            array(
                // expected rules
                array(
                    'letter' => array(
                        'raw_type' => 'string',
                        'raw_class' => null,
                        'flat_pattern' => '/^[abc]$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'letter', // name 
                'randomElement', // method 
                // methodArguments 
                array('a,b,c'), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #2 with a variable as argument
            array(
                // expected rules
                array(
                    'random_digit' => array(
                        'raw_type' => 'int',
                        'raw_class' => null,
                        'flat_pattern' => '/^\d$/',
                    ),
                    'random_number' => array(
                        'raw_type' => 'int',
                        'raw_class' => null,
                        'flat_pattern' => '/^\d*$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'random_number', // name 
                'randomNumber', // method 
                // methodArguments 
                array('%random_digit%'), 
                // variableConfigs
                array(
                    'random_digit' => new VariableConfig('random_digit', 'randomDigit'),
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #3 non existent faker method
            array(
                // expected rules
                array(
                    'empty_var' => array(
                        'raw_type' => 'null',
                        'raw_class' => null,
                        'flat_pattern' => '/^$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'empty_var', // name 
                'foobar', // method 
                // methodArguments 
                array(), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #4 words
            array(
                // expected rules
                array(
                    'wording' => array(
                        'raw_type' => 'array',
                        'raw_count' => 4,
                        'flat_pattern' => '/^\S+\s\S+\s\S+\s\S+$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'wording', // name 
                'words', // method 
                // methodArguments 
                array(4), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #5 rgb
            array(
                // expected rules
                array(
                    'rgb' => array(
                        'raw_type' => 'array',
                        'raw_count' => 3,
                        'flat_pattern' => '/^\d+,\d+,\d+$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'rgb', // name 
                'rgbColorAsArray', // method 
                // methodArguments 
                array(), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #6 creditCardDetails
            array(
                // expected rules
                array(
                    'credit_card_details' => array(
                        'raw_type' => 'array',
                        'raw_count' => 4,
                        'flat_pattern' => '/^.+,.+,.+,.+$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'credit_card_details', // name 
                'creditCardDetails', // method 
                // methodArguments 
                array(), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #7 sentences
            array(
                // expected rules
                array(
                    'sentences' => array(
                        'raw_type' => 'array',
                        'raw_count' => 4,
                        'flat_pattern' => '/^.+\n.+\n.+\n.+$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'sentences', // name 
                'sentences', // method 
                // methodArguments 
                array(4), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #8 sentences
            array(
                // expected rules
                array(
                    'paragraphs' => array(
                        'raw_type' => 'array',
                        'raw_count' => 4,
                        'flat_pattern' => '/^.+\n.+\n.+\n.+$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'paragraphs', // name 
                'paragraphs', // method 
                // methodArguments 
                array(4), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #9 sentences
            array(
                // expected rules
                array(
                    'date' => array(
                        'raw_class' => '\DateTime',
                        'flat_pattern' => '/^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2}$/',
                    ),
                ), 
                $defaultFaker, // faker 
                // values
                array(),  
                'date', // name 
                'dateTime', // method 
                // methodArguments 
                array('d/m/Y H:i:s'), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                false, // useIncrement 
                false, // resetIncrement 
            ),
            // data set #10 number with increment
            array(
                // expected rules
                array(
                    'number' => array(
                        'raw_type' => 'int',
                        'flat_pattern' => '/^6$/',
                    ),
                ), 
                $fakerFixDigit, // faker 
                // values
                array(),  
                'number', // name 
                'fixDigit', // method 
                // methodArguments 
                array(5), 
                // variableConfigs
                array(
                ),  
                false, // optional 
                false, // unique 
                false, // force 
                true, // useIncrement 
                false, // resetIncrement 
            ),
        );
    }
}

class FixDigitProvider 
{
    public function fixDigit($num = 0)
    {
        return is_numeric($num) ? $num : 0;
    }
}
