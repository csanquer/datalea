<?php

namespace CSanquer\FakeryGenerator\Test\Model;

use CSanquer\FakeryGenerator\Model\VariableConfig;

/**
 * VariableConfigTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-13 at 08:23:50.
 * 
 * @author Charles Sanquer <charles.sanquer@gmail.com>
 */
class VariableConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var VariableConfig
     */
    protected $variableConfig;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->variableConfig = new VariableConfig();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testConstruct()
    {
        $variableConfig = new VariableConfig('firstname', 'firstName', array(1), true);
        $this->assertEquals('firstname', $variableConfig->getName());
        $this->assertEquals('firstName', $variableConfig->getMethod());
        $this->assertEquals(array(1), $variableConfig->getMethodArguments());
        $this->assertEquals(true, $variableConfig->isUnique());
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getName
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getVarName
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setName
     * 
     * @dataProvider providerGetSetName
     */
    public function testGetSetName($name, $expected)
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setName($name));
        $this->assertEquals($expected, $this->variableConfig->getName());
        $this->assertEquals('%'.$expected.'%', $this->variableConfig->getVarName());
    }

    public function providerGetSetName()
    {
        return array(
            array('firstname', 'firstname'),
            array('^$fi;:rstname%;', 'firstname'),
        );
    }
    
    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getMethod
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setMethod
     */
    public function testGetSetMethod()
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setMethod('firstName'));
        $this->assertEquals('firstName', $this->variableConfig->getMethod());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getMethodArguments
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setMethodArguments
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::hasMethodArguments
     */
    public function testGetMethodArguments()
    {
        $this->assertFalse($this->variableConfig->hasMethodArguments());
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setMethodArguments(array(1,2)));
        $this->assertTrue($this->variableConfig->hasMethodArguments());
        $this->assertEquals(array(1,2), $this->variableConfig->getMethodArguments());
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::getMethodArgument
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::hasMethodArgument
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::addMethodArgument
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setMethodArgument
     */
    public function testGetMethodArgument()
    {
        $this->assertFalse($this->variableConfig->hasMethodArgument(0));
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setMethodArgument(0, 1));
        $this->assertTrue($this->variableConfig->hasMethodArguments(0));
        $this->assertEquals(1, $this->variableConfig->getMethodArgument(0));
        $this->assertFalse($this->variableConfig->hasMethodArgument(1));
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->addMethodArgument('5'));
        $this->assertTrue($this->variableConfig->hasMethodArguments(0));
        $this->assertTrue($this->variableConfig->hasMethodArguments(1));
        $this->assertEquals(1, $this->variableConfig->getMethodArgument(0));
        $this->assertEquals('5', $this->variableConfig->getMethodArgument(1));
    }

    /**
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::isUnique
     * @covers CSanquer\FakeryGenerator\Model\VariableConfig::setUnique
     * @dataProvider providerIsSetUnique
     */
    public function testIsSetUnique($unique, $expected)
    {
        $this->assertInstanceOf('\\CSanquer\\FakeryGenerator\\Model\\VariableConfig', $this->variableConfig->setUnique($unique));
        $isUnique = $this->variableConfig->isUnique();
        $this->assertInternalType('bool', $isUnique);
        $this->assertEquals($expected, $isUnique);
    }
    
    public function providerIsSetUnique() 
    {
        return array(
            array(0, false),
            array(1, true),
            array(null, false),
            array('', false),
            array(true, true),
            array(false, false),
        );
    }

}
